---
stages:
- name: Deploy Chatbot
  properties:
  - name: CHATBOT_JSON_URL
    value: '${CHATBOT_JSON_URL}'
    type: text
  - name: CHATBOT_NAME
    value: '${CHATBOT_NAME}'
    type: text
  - name: CHATBOT_NAME_RAW
    value: '${CHATBOT_NAME_RAW}'
    type: text
  - name: DISABLE_METRIC
    value: '${DISABLE_METRIC}'
    type: text
  - name: TRACKER_URL
    value: '${TRACKER_URL}'
    type: text
  jobs:
  - name: Deploy Chatbot Assets
    type: deployer
    target:
      region_id: ${PROD_REGION_ID}
      organization: ${PROD_ORG_NAME}
      space: ${PROD_SPACE_NAME}
      application: Load Chatbot Assets
    script: |
      #!/bin/bash -ex

      # Fetch the workspace json from the marketplace
      if ! curl -L -o workspace.json "$CHATBOT_JSON_URL"; then
        echo "Failed to fetch workspace for chatbot $CHATBOT_NAME from $CHATBOT_JSON_URL."
        exit 1
      fi

      # Always use a constant name for the BAE Workspaces
      SERVICE_NAME="Bot Asset Exchange Workspaces"
      # List the conversation services, if no conversation exists, create service
      # and service key for example:
      # $ cf services | grep conversation
      # Conversation-hf conversation    free    create succeeded
      if ! cf services | grep "$SERVICE_NAME"; then
        echo "Creating new conversation service ... "
        cf create-service conversation free "$SERVICE_NAME"
        cf create-service-key "$SERVICE_NAME" "$SERVICE_NAME"
        echo "============================================================="
        echo "Created new conversation service: SERVICE_NAME: $SERVICE_NAME"
        echo "============================================================="
      fi

      # Fetch service key name for the service, for example:
      # $ cf service-keys Conversation-hf
      # Getting keys for service instance Conversation-hf
      #
      # name
      # Credentials-1
      # NOTE: Use tail -1 to get the last line in the output
      # TODO: What if there are multiple service keys?
      CREDENTIALS=$(cf service-keys "$SERVICE_NAME" | tail -1)

      # Fetch the service key credentials, parse it with json, for example:
      # $ cf service-key Conversation-hf Credentials-1
      # Getting key Credentials-1 for service instance Conversation-hf
      npm install -g json
      jsonkey=$( cf service-key "$SERVICE_NAME" "$CREDENTIALS" | tail -n +3 )
      wcuser=$( echo $jsonkey | json username )
      wcpass=$( echo $jsonkey | json password )
      wcurl=$( echo $jsonkey | json url )

      # Upload workspace
      resp=$( curl --user $wcuser:$wcpass \
                 -H "Content-Type: application/json" \
                 -X POST -d @workspace.json \
                 $wcurl/v1/workspaces?version=2017-05-26 )
      echo $resp | json
      WORKSPACE_ID=$( echo $resp | json workspace_id )

      # Handle failures
      if [ -z "$WORKSPACE_ID" ]; then
        echo "Failed creating new workspace..."
        echo "If too many workspaces already, discard obsolete workspaces using: "
        echo "https://www.ibmwatsonconversation.com"
        exit 1
      fi

      # Tracking Metrics
      if [ "NO" != "$DISABLE_METRIC" ]; then
        echo "============================================================="
        echo "Adding deployment data to metrics tracker... "
        echo "============================================================="
        space_id=$(cf space ${CF_SPACE} --guid)
        service_id=$(cf service "Bot Asset Exchange Workspaces" --guid)
        config='{"repository_id": "chatbot-deployer",
               "target_runtimes": [],
               "target_services": ["Conversation"],
               "event_id": "web",
               "event_organizer": "dev-journeys"}'
        DATE=$(date '+%Y-%m-%d %H:%M:%S')
        data=$(cat <<-EOF
        {
        "space_id": "$space_id",
        "service_id": "$service_id",
        "date_sent":"$DATE",
        "bot_name": "$CHATBOT_NAME_RAW",
        "config": $config
        }
      EOF
        )

        callback=$(curl -d "$data" -H "Content-Type: application/json" -X POST $TRACKER_URL)
        if [[ "$callback" == *"true"* ]]; then
          echo "metrics sent successfully"
        else
          echo "metrics server error. Skipping..."
        fi

      else
        echo "============================================================="
        echo "Opt-out metrics tracker"
        echo "============================================================="
      fi


      # Print success
      echo "=================================================="
      echo "Created new workspace: WORKSPACE_ID: $WORKSPACE_ID"
      echo "=================================================="

      # Double check that workspace ID matches GET request
      resp=$( curl --user $wcuser:$wcpass -X GET \
              $wcurl/v1/workspaces/$WORKSPACE_ID?version=2017-04-21 )

      status=$?
      echo $resp| json
      resp_wsid=$( echo $resp | json workspace_id )
      if [ $status -ne 0 ] || [ "$resp_wsid" != "$WORKSPACE_ID" ]; then
        echo "Invalid workspace: $WORKSPACE_ID"
        echo "Administer your workspaces at: https://www.ibmwatsonconversation.com"
        exit 1
      fi
hooks:
- enabled: true
  label: null
  ssl_enabled: false
  url: https://devops-api.ng.bluemix.net/v1/messaging/webhook/publish
